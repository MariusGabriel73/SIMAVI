package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ClinicaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClinicaAllPropertiesEquals(Clinica expected, Clinica actual) {
        assertClinicaAutoGeneratedPropertiesEquals(expected, actual);
        assertClinicaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClinicaAllUpdatablePropertiesEquals(Clinica expected, Clinica actual) {
        assertClinicaUpdatableFieldsEquals(expected, actual);
        assertClinicaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClinicaAutoGeneratedPropertiesEquals(Clinica expected, Clinica actual) {
        assertThat(actual)
            .as("Verify Clinica auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClinicaUpdatableFieldsEquals(Clinica expected, Clinica actual) {
        assertThat(actual)
            .as("Verify Clinica relevant properties")
            .satisfies(a -> assertThat(a.getNume()).as("check nume").isEqualTo(expected.getNume()))
            .satisfies(a -> assertThat(a.getTelefon()).as("check telefon").isEqualTo(expected.getTelefon()))
            .satisfies(a -> assertThat(a.getEmail()).as("check email").isEqualTo(expected.getEmail()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClinicaUpdatableRelationshipsEquals(Clinica expected, Clinica actual) {
        assertThat(actual)
            .as("Verify Clinica relationships")
            .satisfies(a -> assertThat(a.getLocatiis()).as("check locatiis").isEqualTo(expected.getLocatiis()))
            .satisfies(a -> assertThat(a.getMedicis()).as("check medicis").isEqualTo(expected.getMedicis()));
    }
}
