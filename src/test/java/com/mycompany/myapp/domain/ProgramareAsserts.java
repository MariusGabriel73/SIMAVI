package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class ProgramareAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramareAllPropertiesEquals(Programare expected, Programare actual) {
        assertProgramareAutoGeneratedPropertiesEquals(expected, actual);
        assertProgramareAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramareAllUpdatablePropertiesEquals(Programare expected, Programare actual) {
        assertProgramareUpdatableFieldsEquals(expected, actual);
        assertProgramareUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramareAutoGeneratedPropertiesEquals(Programare expected, Programare actual) {
        assertThat(actual)
            .as("Verify Programare auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramareUpdatableFieldsEquals(Programare expected, Programare actual) {
        assertThat(actual)
            .as("Verify Programare relevant properties")
            .satisfies(a ->
                assertThat(a.getDataProgramare())
                    .as("check dataProgramare")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getDataProgramare())
            )
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getObservatii()).as("check observatii").isEqualTo(expected.getObservatii()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramareUpdatableRelationshipsEquals(Programare expected, Programare actual) {
        assertThat(actual)
            .as("Verify Programare relationships")
            .satisfies(a -> assertThat(a.getPacient()).as("check pacient").isEqualTo(expected.getPacient()))
            .satisfies(a -> assertThat(a.getMedic()).as("check medic").isEqualTo(expected.getMedic()))
            .satisfies(a -> assertThat(a.getLocatie()).as("check locatie").isEqualTo(expected.getLocatie()));
    }
}
