package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class RaportProgramareAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRaportProgramareAllPropertiesEquals(RaportProgramare expected, RaportProgramare actual) {
        assertRaportProgramareAutoGeneratedPropertiesEquals(expected, actual);
        assertRaportProgramareAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRaportProgramareAllUpdatablePropertiesEquals(RaportProgramare expected, RaportProgramare actual) {
        assertRaportProgramareUpdatableFieldsEquals(expected, actual);
        assertRaportProgramareUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRaportProgramareAutoGeneratedPropertiesEquals(RaportProgramare expected, RaportProgramare actual) {
        assertThat(actual)
            .as("Verify RaportProgramare auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRaportProgramareUpdatableFieldsEquals(RaportProgramare expected, RaportProgramare actual) {
        assertThat(actual)
            .as("Verify RaportProgramare relevant properties")
            .satisfies(a ->
                assertThat(a.getOraProgramata())
                    .as("check oraProgramata")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getOraProgramata())
            )
            .satisfies(a ->
                assertThat(a.getOraInceputConsultatie())
                    .as("check oraInceputConsultatie")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getOraInceputConsultatie())
            )
            .satisfies(a -> assertThat(a.getDurataConsultatie()).as("check durataConsultatie").isEqualTo(expected.getDurataConsultatie()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRaportProgramareUpdatableRelationshipsEquals(RaportProgramare expected, RaportProgramare actual) {
        assertThat(actual)
            .as("Verify RaportProgramare relationships")
            .satisfies(a -> assertThat(a.getProgramare()).as("check programare").isEqualTo(expected.getProgramare()));
    }
}
