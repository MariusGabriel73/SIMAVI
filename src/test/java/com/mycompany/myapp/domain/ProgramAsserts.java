package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class ProgramAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramAllPropertiesEquals(Program expected, Program actual) {
        assertProgramAutoGeneratedPropertiesEquals(expected, actual);
        assertProgramAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramAllUpdatablePropertiesEquals(Program expected, Program actual) {
        assertProgramUpdatableFieldsEquals(expected, actual);
        assertProgramUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramAutoGeneratedPropertiesEquals(Program expected, Program actual) {
        assertThat(actual)
            .as("Verify Program auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramUpdatableFieldsEquals(Program expected, Program actual) {
        assertThat(actual)
            .as("Verify Program relevant properties")
            .satisfies(a -> assertThat(a.getZiuaSaptamanii()).as("check ziuaSaptamanii").isEqualTo(expected.getZiuaSaptamanii()))
            .satisfies(a ->
                assertThat(a.getOraStart()).as("check oraStart").usingComparator(zonedDataTimeSameInstant).isEqualTo(expected.getOraStart())
            )
            .satisfies(a ->
                assertThat(a.getOraFinal()).as("check oraFinal").usingComparator(zonedDataTimeSameInstant).isEqualTo(expected.getOraFinal())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramUpdatableRelationshipsEquals(Program expected, Program actual) {
        assertThat(actual)
            .as("Verify Program relationships")
            .satisfies(a -> assertThat(a.getMedic()).as("check medic").isEqualTo(expected.getMedic()))
            .satisfies(a -> assertThat(a.getLocatie()).as("check locatie").isEqualTo(expected.getLocatie()));
    }
}
