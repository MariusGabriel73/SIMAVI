package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class FisaMedicalaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFisaMedicalaAllPropertiesEquals(FisaMedicala expected, FisaMedicala actual) {
        assertFisaMedicalaAutoGeneratedPropertiesEquals(expected, actual);
        assertFisaMedicalaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFisaMedicalaAllUpdatablePropertiesEquals(FisaMedicala expected, FisaMedicala actual) {
        assertFisaMedicalaUpdatableFieldsEquals(expected, actual);
        assertFisaMedicalaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFisaMedicalaAutoGeneratedPropertiesEquals(FisaMedicala expected, FisaMedicala actual) {
        assertThat(actual)
            .as("Verify FisaMedicala auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFisaMedicalaUpdatableFieldsEquals(FisaMedicala expected, FisaMedicala actual) {
        assertThat(actual)
            .as("Verify FisaMedicala relevant properties")
            .satisfies(a -> assertThat(a.getDiagnostic()).as("check diagnostic").isEqualTo(expected.getDiagnostic()))
            .satisfies(a -> assertThat(a.getTratament()).as("check tratament").isEqualTo(expected.getTratament()))
            .satisfies(a -> assertThat(a.getRecomandari()).as("check recomandari").isEqualTo(expected.getRecomandari()))
            .satisfies(a ->
                assertThat(a.getDataConsultatie())
                    .as("check dataConsultatie")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getDataConsultatie())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFisaMedicalaUpdatableRelationshipsEquals(FisaMedicala expected, FisaMedicala actual) {
        assertThat(actual)
            .as("Verify FisaMedicala relationships")
            .satisfies(a -> assertThat(a.getProgramare()).as("check programare").isEqualTo(expected.getProgramare()));
    }
}
